class MinStack:

    def __init__(self):
        self.st = [] #initialize stack

    def push(self, val: int) -> None: 
        min_val = self.getMin() #retrieve min value from input
        if min_val == None or min_val > val: #check diff cases
            min_val = val
        
        self.st.append([val, min_val]) #append to stack

    def pop(self) -> None:
        self.st.pop() #directly pop elements in stack

    def top(self) -> int:
        return self.st[-1][0] if self.st else None #returns most recent value added to stack

    def getMin(self) -> int:
        return self.st[-1][1] if self.st else None #returns min value now present in stack
